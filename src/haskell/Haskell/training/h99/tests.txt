myLast [1, 2, 3] == 3
myLast [1, 2, 3, 4] == 4

myButLast [1, 2, 3] == 2
myButLast [1, 2, 3, 4] == 3

elementAt [1, 2, 3, 4] 1 == 1
elementAt [1, 2, 3, 4] 2 == 2
elementAt [1, 2, 3, 4] 3 == 3
elementAt [1, 2, 3, 4] 4 == 4

myLength [] == 0
myLength [1] == 1
myLength [1, 1] == 2
myLength [1, 1, 1] == 3

myReverse [] == []
myReverse [1] == [1]
myReverse [1, 2] == [2, 1]
myReverse [1, 2, 3] == [3, 2, 1]
myReverse [1, 2, 3, 4] == [4, 3, 2, 1]
myReverse [1, 2, 3, 4, 5] == [5, 4, 3, 2, 1]

isPalindrome [] == True
isPalindrome [1] == True
isPalindrome [1, 1] == True
isPalindrome [1, 2, 1] == True
isPalindrome [1, 2, 2, 1] == True
isPalindrome [1, 2, 3, 2, 1] == True
isPalindrome [1, 2, 3, 2, 4] == False
isPalindrome [1, 3, 3, 2, 1] == False
isPalindrome [0, 2, 3, 2, 1] == False
isPalindrome [1, 2, 3, 4] == False
isPalindrome [1, 2, 3] == False
isPalindrome [1, 2] == False

flatten (Elem 5) == [5]
flatten (List [Elem 1, List [Elem 2, List [Elem 3, Elem 4], Elem 5]]) == [1,2,3,4,5]
flatten (List []) == []
flatten (List [(List [(List [Elem 1, Elem 2]), Elem 3, Elem 4]), Elem 5]) == [1, 2, 3, 4, 5]

compress "aaaabccaadeeee" == "abcade"
compress "aaaaaaaaaaabbbbbbbcccccccaaddddddddeeee" == "abcade"
compress "abccaadeeee" == "abcade"
compress "aaaabccaadeeee" == "abcade"
compress "aaaabccaaddddddeeee" == "abcade"
compress "aaaabccaade" == "abcade"
compress "aaaabccaadeaaaaaa" == "abcadea"
compress "andrey" == "andrey"
compress "" == ""

pack ['a','a','a','a','b','c','c','a','a','d','e','e','e','e'] == ["aaaa","b","cc","aa","d","eeee"]
pack [] == []
pack "abc" == ["a", "b", "c"]
pack [1] == [[1]]

encode "aaaabccaadeeee" == [(4,'a'),(1,'b'),(2,'c'),(2,'a'),(1,'d'),(4,'e')]
encode "aaaabbbbccaadeeee" == [(4,'a'),(4,'b'),(2,'c'),(2,'a'),(1,'d'),(4,'e')]

encodeModified "aaaabccaadeeee" == [Multiple 4 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e']
encodeModified "aaaaabccaadeeee" == [Multiple 5 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e']
encodeModified "bccaadeeee" == [Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e']
encodeModified "aaaabccaadeeeeee" == [Multiple 4 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 6 'e']
encodeModified "a" == [Single 'a']

decodeModified [Multiple 4 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e'] == "aaaabccaadeeee"
decodeModified [Multiple 5 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e'] == "aaaaabccaadeeee"
decodeModified [Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e'] == "bccaadeeee"
decodeModified [Multiple 4 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 6 'e'] == "aaaabccaadeeeeee"
decodeModified [Single 'a'] == "a"

encodeDirect "aaaabccaadeeee" == [Multiple 4 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e']
encodeDirect "aaaaabccaadeeee" == [Multiple 5 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e']
encodeDirect "bccaadeeee" == [Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 4 'e']
encodeDirect "aaaabccaadeeeeee" == [Multiple 4 'a',Single 'b',Multiple 2 'c', Multiple 2 'a',Single 'd',Multiple 6 'e']
encodeDirect "a" == [Single 'a']

dupli "abcd" == "aabbccdd"
dupli [1] == [1, 1]

repli "abcd" 2 == "aabbccdd"
repli [1] 2 == [1, 1]
repli "abcd" 3 == "aaabbbcccddd"
repli [1] 5 == [1, 1, 1, 1, 1]
repli [1] 0 == []

dropEvery "abcdefghik" 3 == "abdeghk"
dropEvery "1234567890" 2 == "13579"

split "1234567890" 0 == ("", "1234567890")
split "1234567890" 1 == ("1", "234567890")
split "1234567890" 2 == ("12", "34567890")
split "1234567890" 3 == ("123", "4567890")
split "1234567890" 4 == ("1234", "567890")
split "1234567890" 5 == ("12345", "67890")

slice "0123456789" 0 9 == "0123456789"
slice "0123456789" 0 8 == "012345678"
slice "0123456789" 0 7 == "01234567"
slice "0123456789" 0 6 == "0123456"
slice "0123456789" 0 5 == "012345"
slice "0123456789" 0 4 == "01234"
slice "0123456789" 0 3 == "0123"
slice "0123456789" 0 2 == "012"
slice "0123456789" 0 1 == "01"
slice "0123456789" 0 0 == "0"
slice "0123456789" 4 6 == "456"

rotate "0123456789" 1 == "1234567890"
rotate "0123456789" 2 == "2345678901"
rotate "0123456789" 3 == "3456789012"
rotate "0123456789" 4 == "4567890123"
rotate "0123456789" 5 == "5678901234"
rotate "0123456789" 6 == "6789012345"
rotate "0123456789" 7 == "7890123456"
rotate "0123456789" 8 == "8901234567"
rotate "0123456789" 9 == "9012345678"
rotate "0123456789" 10 == "0123456789"
rotate "0123456789" (-10) == "0123456789"
rotate "0123456789" (-9) == "1234567890"
rotate "0123456789" (-8) == "2345678901"
rotate "0123456789" (-7) == "3456789012"
rotate "0123456789" (-6) == "4567890123"
rotate "0123456789" (-5) == "5678901234"
rotate "0123456789" (-4) == "6789012345"
rotate "0123456789" (-3) == "7890123456"
rotate "0123456789" (-2) == "8901234567"
rotate "0123456789" (-1) == "9012345678"
rotate "0123456789" (-0) == "0123456789"

removeAt 2 "abcd" == ('b',"acd")
removeAt 1 "abcd" == ('a',"bcd")

insertAt '1' "abcd" 0 == "1abcd"
insertAt '1' "abcd" 1 == "a1bcd"
insertAt '1' "abcd" 2 == "ab1cd"
insertAt '1' "abcd" 3 == "abc1d"
insertAt '1' "abcd" 4 == "abcd1"

range 0 10 == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
range 1 1 == [1]
range 1 2 == [1, 2]

foldr (&&) True [length (combinations [1..n] m) == numCombinations n m | n <- [1..15], m <- [1..n]]

foldr (&&) True [map noClashes (group [2,3,4] ["aldo","beat","carla","david","evi","flip","gary","hugo","ida"])]

lsort ["", "a", "bd", "cdd"] == ["", "a", "bd", "cdd"]
lsort ["ab", "a", "busd", ""] == ["", "a", "ab", "busd"]

isPrime 2 && isPrime 3 && isPrime 5 && isPrime 7 && isPrime 11 && isPrime 17
(not $ isPrime 4) && (not $ isPrime 6) && (not $ isPrime 8) && (not $ isPrime 9)

all id [myGCD a b == gcd a b | a <- [1..100], b <- [1..100]]

coprime 2 3
coprime 11 17
coprime 9 25

totient 10 == 4
totient 15 == 8

primeFactors 315 == [3, 3, 5, 7]
primeFactors 25 == [5, 5]

primeFactorsMult 315 == [(3,2),(5,1),(7,1)]
primeFactorsMult 25 == [(5, 2)]

all isZero [totient m - phi m | m <- [2..300]] == True
phi 10 == 4
phi 15 == 8

primesR 10 20 == [11,13,17,19]
primesR 2 20  == [2, 3, 5, 7, 11, 13, 17, 19]

goldbach 28 == (5, 23)
goldbach 4 == (2, 2)
goldbach 8 == (3, 5)

gray 3 == ["000","001","011","010","110","111","101","100"]

sortOn id [2, 1, 0, 2, 1, 0, 9] == [0, 0, 1, 1, 2, 2, 9]
sortOn snd [(0, 1), (0, 0), (0, 10), (0, 5)] == [(0, 0), (0, 1), (0, 5), (0, 10)]

insertOrderedBy id 3 [1, 2, 4, 5] == [1, 2, 3, 4, 5]
insertOrderedBy snd (0, 3) [(0, 1), (0, 2), (0, 4), (0, 5)] == [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]

huffman [('a',45),('b',13),('c',12),('d',16),('e',9),('f',5)] == [('a',"0"),('b',"101"),('c',"100"),('d',"111"),('e',"1101"),('f',"1100")]
