TASKS:

	Write a program to generate random passwords.

  MUST HAVES:

	The program must independently process command line arguments and interpret the following options:
	-m1 minimum password length
	-m2 maximum password length
	-n password length
	-c number of passwords
	-a character alphabet
	-C [aADS] character set (specify one or more characters from the set {a, A, D, S}), a - small Latin characters, A - large Latin characters, D - digits, S - special characters.
	Check the correctness of options and option arguments (the same options should not be repeated, a numeric string should be passed as a length, etc.). Options can be passed in any order. There may be other options that should be ignored. If there is an option -m1 there should be an option -m2. Options -m1, -m2 and -n are not compatible together (give appropriate message). Options -a and -C are not compatible together (give appropriate message).
	An example of passing the correct options:
	# generate.exe -s -m1 10 -i -m2 20 -CaD
	# generate.exe -m3 -n 10 -a 123456

  EXTRA TASK (FOR STUDENT. FOR THIS GIG IS ALSO MUST HAVE)

	Additionally, provide a way to pass through arguments (introduce some other option) the probability of occurrence of characters in the password. If the character set is specified via the -C option, then for each of the specified characters aADS indicate the probability (this will be the probability of choosing a character from this set). If the set is specified via the -a option, then the probability must be specified for individual characters of the alphabet. If for some characters or letters aADS probability is not specified, then the remaining probability is evenly divided between the remaining characters of the alphabet (for the -a option) or sets of characters (for the -C option).

REQUIREMENTS:



2) Well documented code. Use the attached files as examples of docstrings I need for every non static function in the module.



3) Style. use snake_case for everything except CONSTANTS which should be UPPER_CASE_LIKE_THIS

preferably size 2 idndents and indents using spaces

/**/ - comments for documentation. // - only for extremely important inline notes


pointers must be like this:

  int *pointer;

not like this:
  
  int* pointer;

for functions like this is also acceptable:

  int * pointer_func(void) {
    return NULL;
  }


GOOD:



for (...) {
  ...
}



BAD:



for (...)
{
  ...
}

Example of function foc strings:

/*
  Create a list, which is populated with values of the given array.
  @param arr is the array of arbitrary type values
  @param arr_size is the size of the array arr.
  @retutns a pointer to a new created list.
*/
list_t * list_create_from_arr(void **arr, int arr_size) {
  list_t *new_list = list_create();
  if (new_list == NULL) {
    return NULL;
  }
  for (int i = 0; i < arr_size; i++) {
    list_push_tail(new_list, arr[i]);
  }
  return new_list;
}



Doc strings for functions should be in the implementation file, not in the header file



4) Write unit tests. Ideally for every non static function of the module.



5) for every non-trivial idea or implementation detail you come up with, please write a note in a special notes.txt file, so I can read them and be able to explain them to my students.



6) Write a Makefile which will let me simply do the following:



Run> make       #- for building

Run> make clean #- for removing object files and junk

Run> make test  #- for running all the unit tests after running make.