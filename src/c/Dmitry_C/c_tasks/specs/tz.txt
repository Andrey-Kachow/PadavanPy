Get a static two-dimensional array of STRINGS_COUNT strings and MAX_STRING_SIZE columns and a dynamic array of STRINGS_COUNT strings. Arrays are considered parallel indexed, i.e. the corresponding rows are located in the elements with the same indexes.
Read no more than STRINGS_COUNT lines from a file.
If the string is not greater than MAX_STRING_SIZE, place it in a string of a static two-dimensional array. If it is more - place the first MAX_STRING_SIZE characters in the line of the static two-dimensional array, and the rest in the corresponding line of the dynamic array.
As a result, the strings (depending on the length) will be partly stored in a static array, partly in a dynamic one.
Implement quick sorting of strings stored in the described way. During sorting, it is necessary to rearrange the corresponding parts of the strings in the two arrays in a consistent way.
In the sort function, pass a pointer to the string comparison function. Suggest and implement at least four different string comparison functions (among them, comparison functions in lexicographic order with and without case sensitivity are mandatory).
For testing, implement the generation of a string file (at least STRINGS_COUNT strings). Strings must be less than, equal to or greater than MAX_STRING_SIZE in length.

REQUIREMENTS:

Pure C, no C++


2) Well documented code. Use the attached files as examples of docstrings I need for every non static function in the module.



3) Style. use snake_case for everything except CONSTANTS which should be UPPER_CASE_LIKE_THIS

preferably size 2 idndents and indents using spaces

/**/ - comments for documentation. // - only for extremely important inline notes


pointers must be like this:

  int *pointer;

not like this:
  
  int* pointer;

for functions like this is also acceptable:

  int * pointer_func(void) {
    return NULL;
  }


GOOD:



for (...) {
  ...
}



BAD:



for (...)
{
  ...
}

Example of function doc comments:

/*
  Create a list, which is populated with values of the given array.
  @param arr is the array of arbitrary type values
  @param arr_size is the size of the array arr.
  @retutns a pointer to a new created list.
*/
list_t * list_create_from_arr(void **arr, int arr_size) {
  list_t *new_list = list_create();
  if (new_list == NULL) {
    return NULL;
  }
  for (int i = 0; i < arr_size; i++) {
    list_push_tail(new_list, arr[i]);
  }
  return new_list;
}



Doc strings for functions should be in the implementation file, not in the header file



4) Write unit tests. Ideally for every non static function of the module.



5) for every non-trivial idea or implementation detail you come up with, please write a note in a special notes.txt file, so I can read them and be able to explain them to my students.



6) Write a Makefile which will let me simply do the following:



Run> make       #- for building

Run> make clean #- for removing object files and junk

Run> make test  #- for running all the unit tests after running make.