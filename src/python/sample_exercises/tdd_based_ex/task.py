def greatest_common_divisor(a, b):
    '''Найти наибольший общий делитель чисел a и b'''

    return 0



def are_coprime(a, b):
    '''Является ли два числа a и b взаимно простыми? Ответ является логическим значением'''

    return False



def is_digit(character):
    '''Является ли символ character цирфрой? Или же это иной вид печатного символа. 
    Ответ является логическим значением'''

    return False



def arithmetic_sequence(first_term, stride, term_number):
    '''Найти значение член, идущий под номером term_number в арифметической последовательности
     c начальным значением first_term, шагом stride'''
    return 0



def fibbonaci(n):
    ''' Найти i-тый член последовательности Фиббоначи. 
    Последовательность начинается с двух чисел 0, 1, а затем каждый последующий член равен сумме двух предыдущих '''
    return -1



def can_drink(age, is_united_states):
    ''' Выяснить, законно ли человеку, возраст которого равен параметру age, употреблять алкоголь.
    Ответ является логическим значением.
    Параметр is_united_states является логическим значением (True/False флагом),
    которое в случае истинности требует обратиться к правилам совершенолетия в США '''
    return False



def sum_digits(number):
    '''
    Найти сумму цифр заданного числа number. Например сумма цифр числа 3456 равна 3 + 4 + 5 + 6 = 18
    '''
    return -1



def exponentiation(number, exponent):
    '''
    Возвести число number в степень, показатель которой дан в виде параметра exponent.
    Нельзя пользоваться встроенным оператором возведения в степень (**).
    '''
    return 0



def quotient_remainder_of(dividend, divisor):
    '''
    Произведите деление делимого числа dividend на делитель divisor.
    Найдите частное и остаток и верните оба значения в виде пары чисел (частное, остаток)
    (тип данных: tuple. То бишь кортеж, если по-русски)
    '''
    return 0, 0



def increment_every_decimal_digit(number):
    '''
    Увеличить каждую цифру числа number на 1.
    Цифру 9 заменить на 0.
    Вернуть ответ с помощью инструции return.
    Например число 4010238997 должно превратиться в 5121349008
    '''
    return -1



def rotate_decimal_by(number, rotation):
    '''
    Произвести вращение числа number на расстояние rotation.
    Если rotation является положительным целым числом, тогда нужно вращать вправо.
    Если rotation явлфется отрицательным числом, тогда нужно вращать число влево.
    Вращением на один шаг вправо является смещением вправо и переброс самой правой цифры влево.

        Пример: 
                            +-отсюда-+              +--туда--+
                            |        |              |        |
                            V        |              V        |
            12345 ------>   .  1234  5  --------->  5  1234  .   ---------> 51234

    Вращением влево производится также, но смещение в лево и производится перенос самой левой цифры

        Пример: 
                            +-отсюда-+              +--туда--+
                            |        |              |        |
                            |        V              |        V
            12345 ------>   1  2345  .  --------->  .  2345  1   ---------> 23451
    '''
    return 0


def swapped(a, b):
    '''
    Объединить числа a и b в виде пару чисел, где "b" является первой, а переменная "a" второй.
    Вернуть пару чисел с помощью инструкци return
    '''
    return -1, -1



def factorial(n):
    '''
    Найти факториан числа n.
    Факториал числа 0 равен 1, а факториал любого положительного целого числа является произведением
    этого числа на факториал числа на единицу меньше.
    '''
    return -1
