import json
import os


'''
    Добро пожаловать во второе упражнение раздела, посвященного файлам.
    Задача состоит в том, чтобы прочитать json файл с объектами ответа от сервера
    интернет-магазина и вывести на экран результат проверки json-объектов
    на наличие верных ключей и корректность их значений.

    json файл лежит в папке catalogue и называется response.json


    Задание 1. Напишите функцию get_json_content, которая читает содержимое
    json файла и преобразует его в список словарей, который представляет собой
    json объект. Аргументом функции get_json_content является путь к
    файлу для чтения.

    Подсказка. Рекомендуется использовать конструкцию with ... as ...,
    а также метод .read(). Затем содержимое отправить функции json.loads, которая
    вернет представление json-файла в виде списка словарей.
'''


def get_json_content(json_path):
    with open(json_path, encoding='utf8') as f:
        json_str = f.read()
    return json.loads(json_str)


'''
    Задание 2. Дан словарь REQUIREMENTS, в котором ключами являются необходимые
    атрибуты объектов json, которые были получены от сервера.

    Если соответствующим значением является 'url', значит атрибут должен являться
    строкой, представляющую ссылку в интернете.

    Если соответствующее значение представляет собой список, то атрибут должен
    принимать только те значения, которые перечислины в списке. То есть это список
    допустимых значений атрибута.

    В остальных случаях соответствующее значение представляет собой тип данных,
    например int, str, bool. Это означает, что значение атрибута должно иметь
    тот же тип, что указан в требованиях REQUIREMENTS.

    Дальнейшее условия задания см. ниже
'''


REQUIREMENTS = {
    "timestamp": int,
    "referer": 'url',
    "location": 'url',
    "remoteHost": str,
    "partyId": str,
    "sessionId": str,
    "pageViewId": str,
    "eventType": ["itemBuyEvent", "itemViewEvent"],
    "item_id": str,
    "item_price": int,
    "item_url": 'url',
    "basket_price": str,
    "detectedDuplicate": bool,
    "detectedCorruption": bool,
    "firstInSession": bool,
    "userAgentName": str,
}

'''
    Задание 2.1
    Напините функцию all_keys_present, которая проверяет, содержит ли
    json-словарь-объект все атрибуты, что указаны в ключах словаря REQUIREMENTS.

    Аргументом является json-объект, то есть питоновский словарь с атрибутами объекта.
    Возвращаемым значением является True, если данный объект содержит все необходимые
    ключи. Иначе возвращаемым значением является False.

    Подсказка. Пройдитесь по словарю REQUIREMENTS с помощью цикла for и проверьте
    с помощью if и оператора in, находится ли ключ из REQUIREMENTS также и ключом
    словаря obj. Если нет, то сразу возвращается False. Если этого не произошло
    в результате обхода, то в конце возвращается True.
'''

def all_keys_present(obj):
    for key in REQUIREMENTS:
        if key not in obj.keys():
            return False
    return True


'''
    Задание 2.2
    Напините функцию has_only_required_keys, которая проверяет, не содержит ли
    json-словарь-объект лишние атрибуты, которых нет в REQUIREMENTS.

    Аргументом является json-объект, то есть питоновский словарь с атрибутами объекта.
    Возвращаемым значением является True, если данный объект не имеет лишних ключей.
    Иначе возвращаемым значением является False.

    Подсказка. Функция является симметричной, по сравнению с предыдущей. Нужно поменять
    проверяемый и справочный наборы местами. То есть пройтись по ключам объекта,
    и проверять на их присутствие в REQUIREMENTS. В прошлом задании было наоборот.
'''


def has_only_required_keys(obj):
    for key in obj.keys():
        if key not in REQUIREMENTS:
            return False
    return True

'''
    Задание 2.3
    Напишите функцию valid_keyset_naive_impl, которая проверит, все ли необходимые
    ключи на месте и нет ли лишних.

    Аргументом является json-объект, то есть питоновский словарь с атрибутами объекта.
    Возвращаемым значением является True, если данный объект не имеет лишних ключей
    и если данный объект содержит все необходимые ключи.
    Иначе возвращаемым значением является False.

    Подсказка. Нужно воспользоваться обеими предыдущими функциями для общей проверки.
'''

def valid_keyset_naive_impl(obj):
    return all_keys_present(obj) and has_only_required_keys(obj)


'''
    Задание 2.4
    Напишите функцию valid_keyset, которая представляет собой более эффективную
    версию функции valid_keyset_naive_impl.

    Аргументом является json-объект, то есть питоновский словарь с атрибутами объекта.
    Возвращаемым значением является True, если набор ключей данного объекта
    ровно такой же, как и у словаря с требованиями REQUIREMENTS. Иначе возвращаемым
    значением является False.

    Дело в том, что предыдущая наивная реализация по сути занимается проверкой того,
    является ли множество ключей данного объекта подмножеством ключей словаря требований
    REQUIREMENTS. Затем наоборот, является ли второе подмножеством первого.

    В теории множеств, проверка на взаимную подмножественность делается для проверки
    или доказательства равенства двух множеств. В питоне это можно сделать обычным
    операторо равенства.
'''


def valid_keyset(obj):
    return obj.keys() == REQUIREMENTS.keys()


'''
    Задание 3. Напишите функцию проверки, является ли данная строка веб-ссылкой.

    Аргументом функции является строка, а может и не строка, которая может быть
    ссылкой или нет. Это нужно проверить и вернуть True, если аргумент все же
    ссылкой является, иначе False.

    Подсказка. Сначачала надо проверить, является ли данный аргумент строкой.
    Это можно сделать с помощью функции isinstance. Затем нужно проверить, с чего
    начинается данная строка. Если начинается с 'https://' или 'http://',
    тогда это действительно ссылка. Иначе можно считать, что ссылкой не является.
'''


def check_url(url):
    if not isinstance(url, str):
        return False
    if not url.startswith("https://") and not url.startswith("http://"):
        return False
    return True


'''
    Задание 4. Напишите функцию проверки, находится ли данное значение в списке
    разрешенных в соответствующем поле словаря REQUIREMENTS.

    Аргументом функции является строка - название атрибута объекта, который является
    ключем словаря REQUIREMENTS. Вторым аргументом является само значение, которое
    может находиться или отсутствовать в списке дозволенных значений, и в зависимости
    от этого нужно вернуть True и False соответственно.

    Подсказка. Список дозволенных значений можно получить в словаре REQUIREMENTS
    по ключу аргумента keyname.
'''


def check_legal_values(keyname, value):
    return value in REQUIREMENTS[keyname]


'''
    Задание 5. Напишите функцию проверки соответствия типа значения аргумента
    value и vtype.

    Подсказка. получить название типа (класса) любого значения можно с помощью
    функции type.
'''


def check_correct_type(value, vtype):
    return type(value) == vtype


'''
    Задание 6. Напишите функцию check_obj_field, которая проверит на корректность
    данный атрибут keyname данного объекта obj в соответствии с требованиями,
    заложенными в словаре REQUIREMENTS.

    Аргументами является объект и название ключа объекта. Возвращаемыми значениями
    является True, если требования удовлетворены, иначе False.

    Подсказка, примерный алгоритм по шагам:

        1) Убедиться, что данный ключ присутствует в объекте. На всякий случай.

        2) Затем с помощью if-elif-else проверить, значение REQUIREMENTS по ключу
           keyname и в зависимости от такового, вернуть результат функции check_url
           или check_legal_values или check_correct_type.
'''


def check_obj_field(obj, keyname):
    if keyname not in obj:
        return False
    vtype = REQUIREMENTS[keyname]
    value = obj[keyname]
    if vtype == "url":
        return check_url(value)
    elif isinstance(vtype, list):
        return check_legal_values(keyname, value)
    else:
        return check_correct_type(value, vtype)


'''
    Задание 6. Напишите функцию is_valid_object, которая сначала проверит, верный
    ли у объекта набор атрибутов, то есть соответствует ли он требованиям REQUIREMENTS.
    А затем убедится в правильности каждого из значений его атрибутов. Нужно вернуть
    True, если все ОК.
'''


def is_valid_object(obj):
    if not valid_keyset(obj):
        return False
    for key in obj:
        if not check_obj_field(obj, key):
            return False
    return True


'''
    Задание 7. Напишите функцию check_objects, которая сначала проверит, выполняется
    ли функция-предикат is_valid_object для всех элементов списка json-объектов
    objects. Вернуть True, если все объекты корректные.

    Подсказка. Можно воспользоваться функциями all и map
'''


def check_objects(objects):
    return all(map(is_valid_object, objects))


'''
    Дана программа модуля, выведенная в главную функцию файла.
    Она описывает то, как работает программа, вызывая ранее написанные функции.
'''


def ex_2_main():
    objects = get_json_content(os.path.join("catalogue", "response.json"))
    if check_objects(objects):
        print("Pass")
    else:
        print("Fail")


'''
    Код ниже вызовет главную функцию в случае, если файл является исполняемым,
    а не импортированым модулем.
'''


if __name__ == '__main__':
    ex_2_main()
