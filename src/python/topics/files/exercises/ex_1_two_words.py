import sys
import os


'''
    Добро пожаловать в первое упражнение раздела, посвященного файлам.
    Задача состоит в том, чтобы прочитать текст из файла и вывести на экран
    самое длинное слово, а также самое часто встречающееся в тексте английское
    слово.

    Использование программы подразумевает передачу путя к файлу для чтения в
    качестве аргумента командной строки, sys.argv.

    Например: python ex_1_two_words.py catalogue/eng_ru_mixed_text.txt

    Задание 1. Напишите функцию is_valid_argv, которая проверяет корректность
    аргументов командной строки при запуске программы. На вход подается argv,
    список всех аргументов программы. Дана функция print_usage, которая
    печатает пользователю сообщение о том, как правильно использовать программу.

    Функция is_valid_argv возвращает True, если дано два аргумента, то есть
    название исполняемого файла и еще один, а также чтобы второй аргумент
    являлся корректным именем существующего файла. Иначе возвращается False.
    Перед возвращением False также необходимо вызвать функцию print_usage,
    а также вывести на экран причину неправильности поданных аргументов.
'''


def print_usage():
    print("Правильное использование прораммы:")
    print()
    print("python <путь/к/ex_1_two_words.py> <Имя_Файла>")
    print()
    print("Где <Имя_Файла> должно являться относительным" +\
          "или абсолютный путь к текстовому файлу")


def is_valid_argv(argv):
    if len(argv) != 2:
        print("Необходимо отправить только один " +\
              "дополнительный аргумент командной строки")
        print_usage()
        return False
    if not os.path.isfile(argv[1]):
        print(f"Некорректное имя файла {argv[1]}")
        print_usage()
        return False
    return True


'''
    Задание 2. Напишите функцию get_file_content, которая читает содержимое
    текстового файла и возвращает его содержимое в виде строки. Аргументом
    функции get_file_content является путь к файлу для чтения.

    Подсказка. Рекомендуется использовать конструкцию with ... as ...,
    а также метод .read()
'''


def get_file_content(file_path):
    with open(file_path, encoding='utf8') as f:
        file_text = f.read()
    return file_text


'''
    Задание 3. Дан набор символов IGNORED_CHARACTERS, который представляет
    собой строку со специальными символами. Эти символы нужно убрать из
    обрабатываемого текста, прежде чем заниматься подсчетом слов и
    нахождением самого длинного слова.

    Напишите функцию remove_ignored, которая вырежет из данного ей текста все
    символы из IGNORED_CHARACTERS. Аргументом функции remove_ignored является
    текст, из которого нужно удалить все лишние символы.

    Подсказка. Воспользуйтесь методом срок, который называется .replace
        Например:

        >>> s = "abc_def"
        >>> s2 = s.replace("_", "$")
        >>> print(s2)
        abc$def

    Можно заменить ненужные символы на пустую строку, но лучше на пробел, чтобы
    слова, которые пишутся через дефис или опостров не сливались воедино.
'''


IGNORED_CHARACTERS = '.!"\'#$%&()*+-,/:;<=>?@[\\]^_{|}~'


def remove_ignored(text):
    for character in IGNORED_CHARACTERS:
        text = text.replace(character, ' ')
    return text


'''
    Задание 4. Даны два алфавита, Английский и Русский. Использу эти наборы
    символов, реализуйте функции проверки слова на то, из букв какого алфавита
    оно состоит.
'''


ENG_APLPHABET = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
RU_ALPHABET = "АаБбВвГгДдЕеЁёЖжЗзИиКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя"



'''
    Задание 4.1
    Напишите функцию is_eng_alpha, которая в качестве аргумента
    принимает строку - слово и проверяет, все ли буквы данного слова являются
    буквами английского алфавита. Если слово состоит только из букв английского
    алфавита, нужно вернуть True. Иначе, например если в слове
    замешаны русские буквы или другие символы, возвращается False.

    Подсказка:
        Можно решить задачу двумя способами. Первый через list comprehension, и
        функцию all. Второй через цикл for, а также if.

        В любом случае нужно будет использовать инстркуцию return и оператор in
        для определения принадлежности символа слову.
'''


def is_eng_alpha(word):
    return all([char in ENG_APLPHABET for char in word])


'''
    Задание 4.2
    Напишите функцию is_ru_alpha, которая работает по тому же принципу, что и
    is_eng_alpha, но только для русского алфавита.
'''


def is_ru_alpha(word):
    return all([char in RU_ALPHABET for char in word])


'''
    Задание 4.3
    Напишите функцию is_alpha, которая проверяет, является ли данная ей
    в качестве аргумента строка словом или из английских, или из русских букв.

    Подсказка. Можно использовать предыдущие функции is_eng_alpha и is_ru_alpha
'''


def is_alpha(word):
    return is_eng_alpha(word) or is_ru_alpha(word)


'''
    Задание 5. Напишите функцию count_words, которая посчитает, сколько раз
    встречаются каждые слова в тексте. Аргументом функции является список слов
    текста, где слова могут повторяться. Возвращаемым значением является словарь,
    где ключами будут являться слова, а соответствующими им значениями будут
    целые числа, означающие частоту встечаемости слова в тексте.

    Подсказка. Чтобы получить такой словарь, можно в начале создать пустой словарь,
    а затем пройтись по каждому элементу списка words.

    Если слово еще не присутствует в заведенном словаре, то можно добавить
    в словарь это слово в качестве ключа с соответствующим значением 1.
    Это будет означать, что слово на данный момент встретилось один раз.

    Иначе, если слово уже есть в словаре, то соответствующее значение можно
    увеличить на единичку. Это будет означать, что слово уже встречалось, и
    количество появлений этого слова записано. А раз слово встретилось еще раз,
    то это количество выросло на один.

    Затем после обхода всего списка слов, можно вернуть получившийся словать.
'''


def count_words(words):
    word_counts = {}
    for word in words:
        if word in word_counts:
            word_counts[word] += 1
        else:
            word_counts[word] = 1
    return word_counts


'''
    Задание 6. Напишите функцию most_common_word, которая определит наиболее
    часто встречающееся слово в тексте.

    В качестве первого аргумента выступает сам текст, то есть (ожидаемо)
    длинная строка, в которой надо посчитать все слова.

    Вторым аргументом является минимальная длина слова, которое нужно
    учитывать. То есть слова, короче чем сказано в подсчете самого часто
    встречающегося слова участвовать не будут.

    Возвращаемым значением функции должна быть строка,
    наиболее частое слово в тексте.

    Подсказка. Реализовать данную задачу можно несколькими способами. Как вариант,
    можно поступить следующим образом:

        1) Для начала можно с помощью функции remove_ignored, написанной ранее,
           очистить данный текст от посторонних символов, таких как точки и запятые.

        2) Затем нужно разбить текст на отдельные слова с помощью метода split.
           Должн получиться список строк - отдельных слов.

        3) Нужно профильтровать слова с помощью filter. Во-первых, нужно, чтобы
           все слова в отборе были буквенными, то есть пригодится функция is_alpha,
           написанная ранее. Затем стоит также убедиться, что в конечный отбор
           попадут слова, у которых длина больше, чем заданный min_length.
           Это можно проверить, отправив функции filter лямбда-функцию проверки длины.

        4) Затем, уже можно заняться подсчетом слов и воспользоваться ранее
           написанной функцией count_words, чтобы получить словарь с подстчетами

        5) Далее нужно вернуть слово с самым большим числом появлений в тексте.
           Это можно реализовать самостоятельно с помощью цикла. Однако более
           предпочтительным окажется способ через функцию max. Важно передать
           в качествве именного аргумента key лямбда-функцию, которая получает
           слово, а возвращает счет слова в словаре с подсчетами.
'''


def most_common_word(text, min_length=1):
    cleaned_text = remove_ignored(text)
    tokens = cleaned_text.split()
    words = list(filter(is_alpha, tokens))
    long_words = list(filter(lambda word: len(word) >= min_length, words))
    word_counts = count_words(long_words)
    return max(long_words, key=lambda word: word_counts[word])


'''
    Задание 7. Реализовать функцию нахождения самого длинного английского слова
    в тексте. В качестве аргумента выступает строка-текст, предположительно большой.
    Возвращаемым значением должно быть самое длинное английское слова в тексте.

    Подсказка. Как и в предыдущей функции, нужно будет очистить текст от лишних
    символов и разбить его на слова-токены. Далее процесс будет несколько
    отличаться. Нужно будет отфильтровать слова, отобрав только английские.
    Затем взять максимальное слово по его длине.
'''


def longest_eng_word(text):
    cleaned_text = remove_ignored(text)
    tokens = cleaned_text.split()
    eng_words = filter(is_eng_alpha, tokens)
    return max(eng_words, key=lambda word: len(word))


'''
    Дана программа модуля, выведенная в главную функцию файла.
    Она описывает то, как работает программа, вызывая ранее написанные функции.
'''


def ex_1_main():
    if not is_valid_argv(sys.argv):
        return

    filename = sys.argv[1]
    text = get_file_content(filename)

    print("Наиболее частое слово:")
    print(most_common_word(text, min_length=3))
    print()
    print("Наиболее длинное английское слово:")
    print(longest_eng_word(text))


'''
    Код ниже вызовет главную функцию в случае, если файл является исполняемым,
    а не импортированым модулем.
'''

if __name__ == '__main__':
    ex_1_main()
